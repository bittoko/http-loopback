type Error = variant {
  expired;
  missing : text;
  other : text;
  invalid : text;
  fee_not_defined : text;
  trapped : text;
  rejected : text;
  fatal : text;
};
type HttpHeader = record { value : text; name : text };
type HttpResponsePayload = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Test = service {
  generate_new_identity : () -> (opt record { nat; vec text });
  get_principal : (nat) -> (principal);
  get_public_key : (nat) -> (vec nat8) query;
  hello : (text) -> (text);
  loopback : (nat, text) -> (variant { ok : opt text; err : Error });
  sign_message : (nat) -> (opt vec nat8);
  transform : (TransformArgs) -> (HttpResponsePayload) query;
};
type TransformArgs = record {
  context : vec nat8;
  response : HttpResponsePayload;
};
service : Test