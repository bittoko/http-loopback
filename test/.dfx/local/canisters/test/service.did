type CborEntry = record { CborValue; CborValue };
type CborMap = vec CborEntry;
type CborValue = variant {
  majorType0 : nat64;
  majorType1 : int;
  majorType2 : vec nat8;
  majorType3 : text;
  majorType4 : vec Value;
  majorType5 : vec record { Value; Value };
  majorType6 : record { tag : nat64; value : Value };
  majorType7 : variant {
    float : FloatX;
    integer : nat8;
    "bool" : bool;
    _break;
    _undefined;
    _null;
  };
};
type Error = variant {
  expired;
  missing : text;
  other : text;
  invalid : text;
  fee_not_defined : text;
  trapped : text;
  rejected : text;
  fatal : text;
};
type FloatPrecision = variant { f16; f32; f64 };
type FloatX = record {
  exponent : opt int;
  mantissa : nat;
  precision : FloatPrecision;
  isNegative : bool;
};
type HttpHeader = record { value : text; name : text };
type HttpResponsePayload = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Test = service {
  debug_bad : () -> (CborMap) query;
  debug_good : () -> (opt Value) query;
  generate_new_identity : () -> (opt record { nat; vec text });
  get_principal : (nat) -> (principal);
  get_public_key : (nat) -> (vec nat8) query;
  hello : (text) -> (text);
  loopback : (nat, text) -> (variant { ok : opt text; err : Error });
  sign_message : (nat) -> (opt vec nat8);
  transform : (TransformArgs) -> (HttpResponsePayload) query;
};
type TransformArgs = record {
  context : vec nat8;
  response : HttpResponsePayload;
};
type Value = variant {
  majorType0 : nat64;
  majorType1 : int;
  majorType2 : vec nat8;
  majorType3 : text;
  majorType4 : vec Value;
  majorType5 : vec record { Value; Value };
  majorType6 : record { tag : nat64; value : Value };
  majorType7 : variant {
    float : FloatX;
    integer : nat8;
    "bool" : bool;
    _break;
    _undefined;
    _null;
  };
};
service : Test