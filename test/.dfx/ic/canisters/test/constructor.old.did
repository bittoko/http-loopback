type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type Error = 
 variant {
   expired;
   fatal: text;
   fee_not_defined: text;
   invalid: text;
   missing: text;
   other: text;
   rejected: text;
   trapped: text;
 };
type AsyncReturn = 
 variant {
   err: AsyncError;
   ok;
 };
type AsyncError = 
 variant {
   fee_not_defined: text;
   other: text;
   trapped: text;
 };
service : {
  get_principal: (nat) -> (principal);
  get_public_key: (nat) -> (vec nat8) query;
  hello: (text) -> (text);
  init: () -> (AsyncReturn);
  loopback: (text) -> (variant {
                         err: Error;
                         ok: opt text;
                       });
  sign_message: (text) -> (opt blob);
  transform: (TransformArgs) -> (HttpResponsePayload) query;
}
